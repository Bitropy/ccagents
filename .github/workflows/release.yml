name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: ccagents
            asset_name: ccagents-linux-amd64
          
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: ccagents
            asset_name: ccagents-linux-musl-amd64
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: ccagents
            asset_name: ccagents-linux-arm64
          
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: ccagents
            asset_name: ccagents-macos-amd64
          
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: ccagents
            asset_name: ccagents-macos-arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
    
    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        cd ../../../
        sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.target }}
        path: |
          *.tar.gz
          *.tar.gz.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        pattern: binaries-*
        merge-multiple: true
    
    - name: Extract version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Read changelog
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        CHANGELOG=$(sed -n "/## $VERSION/,/## v[0-9]/p" CHANGELOG.md | sed '$d' || echo "See CHANGELOG.md for details")
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### From binary
          Download the appropriate binary for your platform from the assets below.
          
          ### From source
          ```bash
          cargo install ccagents
          ```
          
          ## Checksums
          SHA256 checksums are provided for all binaries.
        files: |
          artifacts/*
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  publish-crate:
    name: Publish to crates.io
    needs: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true